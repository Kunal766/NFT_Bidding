/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AuctionManagerInterface extends utils.Interface {
  functions: {
    "auctions(uint256)": FunctionFragment;
    "createAuction(uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getAuctionInfo(address[])": FunctionFragment;
    "getAuctions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctions"
      | "createAuction"
      | "getAuctionInfo"
      | "getAuctions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionInfo",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctions",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AuctionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createAuction(
      _endTime: PromiseOrValue<BigNumberish>,
      _minIncrement: PromiseOrValue<BigNumberish>,
      _directBuyPrice: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuctionInfo(
      _auctionsList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        directBuy: BigNumber[];
        owner: string[];
        highestBid: BigNumber[];
        tokenIds: BigNumber[];
        endTime: BigNumber[];
        startPrice: BigNumber[];
        auctionState: BigNumber[];
      }
    >;

    getAuctions(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _auctions: string[] }>;
  };

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createAuction(
    _endTime: PromiseOrValue<BigNumberish>,
    _minIncrement: PromiseOrValue<BigNumberish>,
    _directBuyPrice: PromiseOrValue<BigNumberish>,
    _startPrice: PromiseOrValue<BigNumberish>,
    _nftAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuctionInfo(
    _auctionsList: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      directBuy: BigNumber[];
      owner: string[];
      highestBid: BigNumber[];
      tokenIds: BigNumber[];
      endTime: BigNumber[];
      startPrice: BigNumber[];
      auctionState: BigNumber[];
    }
  >;

  getAuctions(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createAuction(
      _endTime: PromiseOrValue<BigNumberish>,
      _minIncrement: PromiseOrValue<BigNumberish>,
      _directBuyPrice: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAuctionInfo(
      _auctionsList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        directBuy: BigNumber[];
        owner: string[];
        highestBid: BigNumber[];
        tokenIds: BigNumber[];
        endTime: BigNumber[];
        startPrice: BigNumber[];
        auctionState: BigNumber[];
      }
    >;

    getAuctions(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      _endTime: PromiseOrValue<BigNumberish>,
      _minIncrement: PromiseOrValue<BigNumberish>,
      _directBuyPrice: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuctionInfo(
      _auctionsList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      _endTime: PromiseOrValue<BigNumberish>,
      _minIncrement: PromiseOrValue<BigNumberish>,
      _directBuyPrice: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _nftAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionInfo(
      _auctionsList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
